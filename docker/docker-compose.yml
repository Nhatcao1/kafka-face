version: '3.7'
services:
  triton-serving:
    image: nvcr.io/nvidia/tritonserver:22.03-py3
    container_name: triton_serving
    restart: unless-stopped
    volumes:
      - ./model_repository:/models
    ports:
      - "8001:8001"
    command: [ "tritonserver", "--model-repository=/models", "--strict-model-config=false" ]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]

  minio:
    image: minio/minio:RELEASE.2020-12-26T01-35-54Z
    container_name: minio
    restart: always
    volumes:
      - ./minio/storage:/data:consistent
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: "minio"
      MINIO_SECRET_KEY: "minio123"
    command: minio server /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
      
      
  postgres:
    image: postgres:14.1
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "changeme"
      PGDATA: /data/postgres
    volumes:
#      - ./postgres/init_database.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5



  milvus-mysql:
    image: mysql:5.7
    restart: always
    container_name: milvus_mysql
    volumes:
      - ./mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
      - ./mysql/metadata:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: 'milvusroot'
      MYSQL_DATABASE: 'milvus'
    ports:
      - 3306:3306
      - 33060:33060
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      timeout: 20s
      retries: 10

  milvus:
    image: milvusdb/milvus:1.1.1-gpu-d061621-330cc6
    container_name: milvus
    restart: always
    volumes:
      - ./milvus/db:/var/lib/milvus/db
      - ./milvus/conf/server_config.yaml:/var/lib/milvus/conf/server_config.yaml
    depends_on:
      - milvus-mysql
    ports:
      - 19530:19530
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  console:
    image: docker.redpanda.com/vectorized/console:latest
    container_name: console
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]

    ports:
      - "8011:8080"
    depends_on:
      - kafka

  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: mongodb
    ports:
      - "27017:27017"
